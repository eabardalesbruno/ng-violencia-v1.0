// üß™ Ejemplo de uso del servicio de actualizaci√≥n

// Datos que se enviar√°n al hacer click en "Actualizar"
const exampleUpdateData = {
  casoId: 537,      // N√∫mero entero
  personaId: 279,   // N√∫mero entero  
  rolId: 7          // N√∫mero entero - ID del rol seleccionado
};

// Endpoint que se llamar√°
const endpoint = "http://localhost:8080/rolespersonacaso/752";

// M√©todo HTTP: PUT

/* 
üìã Flujo completo:

1. Usuario selecciona nuevo rol en el dropdown
   - Roles disponibles: 7 (Agraviado), 9 (Investigado), 11 (Procesado), 16 (Reo contumaz), 17 (Imputado)
2. Hace click en "Actualizar"
3. Se valida que el rol est√© permitido
4. Se formatean los datos como n√∫meros enteros:
   - caso_id ‚Üí casoId (number)
   - persona_id ‚Üí personaId (number)  
   - rol_id ‚Üí rolId (number)
5. Se env√≠a PUT a /rolespersonacaso/{id}
6. Backend actualiza solo el rol
7. Frontend muestra mensaje de √©xito
8. Redirige a la lista
*/

// Ejemplo de logs esperados en consola:
console.log('Datos a actualizar (formato backend):', {
  casoId: 537,     // number
  personaId: 279,  // number
  rolId: 7         // number - seg√∫n selecci√≥n del usuario
});
console.log('Endpoint: http://localhost:8080/rolespersonacaso/752');
console.log('Rol seleccionado ID:', 7, 'tipo:', typeof 7);

// Roles disponibles para selecci√≥n:
const availableRoles = [
  { id: 7, nombre: 'Agraviado' },
  { id: 9, nombre: 'Investigado' },
  { id: 11, nombre: 'Procesado' },
  { id: 16, nombre: 'Reo contumaz' },
  { id: 17, nombre: 'Imputado' }
];

// El rolId enviado ser√° uno de estos IDs seg√∫n la selecci√≥n del usuario
